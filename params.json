{
  "name": "mbedcrypto",
  "tagline": "a portable, small, easy to use and fast c++14 library for cryptography.",
  "body": "#mbedcrypto\r\n`mbedcrypto` is a portable, small, easy to use, feature rich and fast\r\n`c++14` library for cryptography based on fantastic and clean\r\n[mbedtls](https://github.com/ARMmbed/mbedtls)<sup>[note](#mbedtls)</sup>\r\n<sup>[note](#cryptography)</sup>.\r\n\r\na sister project for `Qt5` developers is available as\r\n[qpolarssl](https://github.com/azadkuh/qpolarssl), although `mbedcrypto` is\r\nnewer and has more features with smaller footprint and can be configured to\r\nsupport `QByteArray` through the api.\r\n\r\n\r\nfor more information see [wiki](https://github.com/azadkuh/mbedcrypto/wiki) page.\r\n\r\n----\r\n\r\n## features and highlights\r\n\r\n- *small size*: the `mbedcrypto` is less than `250KB` in size (as single shared\r\n library and stripped under Linux and OS X) with all *predefined* algorithms.\r\n it can be easily embedded into your service or application.\r\n- *easy to use*: although cryptography<sup>[note](#cryptography)</sup> is\r\n complex and complicated, `mbedcrypto` hides most of the complexities, tries to\r\n be easy to use and hard to misuse.\r\n- *portable*: needs an standard `c++14` compiler and compliant `stl`,\r\n compiled and tested by:\r\n  - `g++ 5.x+ / 6+` under `linux`\r\n  - `clang 3.6+` under `os x`\r\n  - `mingw 5.x+` under `msys2` (windows 8.1)\r\n  - `msvc 2015` community edition under `windows 7`\r\n- *low dependency*:\r\n  - the `mbedtls`<sup>[note](#mbedtls)</sup> as underlying cryptography engine,\r\n   is the only mandatory dependency.\r\n  - [catch](https://github.com/philsquared/Catch): only for unit testing.\r\n  - `cmake` for building the library and the unit test app.\r\n- *high+low level*: both high level (c++ objects / exception) and low level (c\r\n pointer / error code) functions are available.\r\n- *highly configurable*: to add or remove the algorithms, simply change `cmake`\r\n build options. see [build options](#build-options)\r\n- *optional suppport for Qt5*: optional support for **Qt5**'s `QByteArray` is also\r\navailable.\r\n\r\n\r\n## supported algorithms\r\nfollowing algorithms are included in `mbedcrypto` in *default build* (see\r\n [wiki usage](https://github.com/azadkuh/mbedcrypto/wiki/usage:-general)):\r\n\r\n- **binary/text conversions**: see [wiki:\r\nsamples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-text-binary-conversion)\r\n  - `hex`\r\n  - `base64`\r\n\r\n- **hashes (message digest)**: see [wiki:\r\nsamples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-hash-and-message-digest)\r\n  - `md5`\r\n  - `sha1`\r\n  - `sha224` / `sha256`\r\n  - `sha384` / `sha512`\r\n  - `hmac`\r\n  - optional hashes: `ripemd160`, `md4`, `md2` (deprecated)\r\n\r\n- **ciphers (symmetric)**: see [wiki:\r\nsamples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-cipher-(symmetric))\r\n  - `aes` (128, 192, 256 bits) and `aes-ni` (hardware accelerated)\r\n  - `des` and `3des` (triple-des)\r\n  - optional ciphers: `blowfish`, `camellia` and `arc4`\r\n\r\n- **cipher block modes**:\r\n  - `ecb` electronic codebook\r\n  - `cbc` cipher block chaining\r\n  - `ctr` counter mode\r\n  - `gcm` Galois/counter and `ccm` (counter cbc-mac) modes.\r\n   see [authneticated encryption with additional data\r\n   (AEAD)](https://en.wikipedia.org/wiki/Authenticated_encryption)\r\n  - optional block modes: `cfb`, `stream` (for `arc4`)\r\n\r\n- **paddings**:\r\n  - `pkcs7`\r\n  - *one and zeros*\r\n  - *zeros and length*\r\n  - *zeros*\r\n\r\n- **random byte generator**: see [wiki\r\nsamples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-random-byte-generator)\r\n  - `ctr_drbg` counter mode deterministic random byte generator based on\r\n   `aes-256` [NIST SP 800-90](https://en.wikipedia.org/wiki/NIST_SP_800-90A)\r\n\r\n- **pki (asymmetric)**: public key infrastructure, see [wiki: rsa\r\nsamples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-PK-(asymmetric)-RSA)\r\nand [wiki: ec samples](https://github.com/azadkuh/mbedcrypto/wiki/how-to:-PK-(asymmetric)-EC)\r\n  - `rsa`\r\n  - `pem` and `der` key formats (ASN.1)\r\n  - optional pks: `eckey` elliptic curve, `eckey_dh` elliptic key\r\n   Diffie–Hellman, `ecdsa` elliptic key digital signature algorithm, `rsa_alt`\r\n   and `rsassa_pss` RSA standard signature algorithm, probabilistic signature\r\n   scheme\r\n  - optional `rsa` key generator\r\n  - optional `ec curves` from well known domain parameters as `NIST`, `Kolbitz`,\r\n  `brainpool` and `Curve25519`.\r\n\r\ntotal number of supported algorithms:\r\n\r\n- hashes: 9\r\n- paddings: 5\r\n- ciphers: 47\r\n- pki: 6\r\n\r\nsee [types.hpp](https://github.com/azadkuh/mbedcrypto/blob/master/include/mbedcrypto/types.hpp)\r\n\r\n\r\n## setup\r\nafter cloning this repository, first update the dependencies:\r\n```bash\r\n#on mbedcrypto directory\r\n$medcrypto/> ./update-dependencies.sh\r\n```\r\nthis script automatically setups `3rdparty` directory, then tries to pull or\r\nupdate dependencies from github.\r\n\r\n```bash\r\n$medcrypto/> mkdir build\r\n$medcrypto/> cd build\r\n$build/> cmake ..\r\n$build/> make\r\n```\r\n\r\n> the `mbedcrypto` library and the companion unit test app would be built into\r\n> `xbin` directory.\r\n\r\nsee [wiki: setup and build](https://github.com/azadkuh/mbedcrypto/wiki/setup-and-build)\r\n---\r\n\r\n## build options\r\nthese are the most important build options:\r\n\r\n| options          | default | message                                                         |\r\n| :---             | :---:   | :---                                                            |\r\n| BUILD_MD2        | OFF     | enable md2 hash (unsecure and deprecated)                       |\r\n| BUILD_MD4        | OFF     | enable md4 hash                                                 |\r\n| BUILD_RIPEMD160  | OFF     | enable ripemd160 hash                                           |\r\n| BUILD_CFB        | OFF     | enable cfb (cipher feedback mode)                               |\r\n| BUILD_CTR        | ON      | enable ctr (cipher counter mode)                                |\r\n| BUILD_GCM        | ON      | enable gcm (Galois cipher mode, for aead cryptography)          |\r\n| BUILD_CCM        | ON      | enable ccm (counter cbc-mac cipher mode, for aead cryptography) |\r\n| BUILD_DES        | ON      | enable des and triple-des cipher                                |\r\n| BUILD_BLOWFISH   | OFF     | enable blowfish cipher                                          |\r\n| BUILD_CAMELLIA   | OFF     | enable camellia cipher                                          |\r\n| BUILD_ARC4       | OFF     | enable arc4 cipher (unsecure)                                   |\r\n| BUILD_PK_EXPORT  | ON      | enable export keys in pem or der format                         |\r\n| BUILD_RSA_KEYGEN | ON      | enable rsa key generator                                        |\r\n| BUILD_EC         | OFF     | enable eckey, eckey_dh and ecdsa algorithms                     |\r\n| BUILD_QT5_BIND   | OFF     | also adds adaptors around **Qt5**'s `QByteArray`                |\r\n\r\nplease see [CMakeLists.txt](./CMakeLists.txt) for the full list.\r\n\r\n\r\n---\r\n\r\n## tests\r\nsamples and unit tests are available under [tests/tdd](./tests/tdd/) folder.\r\n\r\n```bash\r\n#run the tests\r\n$xbin/> ./tests\r\n```\r\n\r\npossible output:\r\n```text\r\nsupports 6 hash algorithms: MD5 , SHA1 , SHA224 , SHA256 , SHA384 , SHA512 ,\r\nsupports 5 padding algorithms: PKCS7 , ONE_AND_ZEROS , ZEROS_AND_LEN , ZEROS ,\r\n         NONE ,\r\nsupports 6 block modes: NONE , ECB , CBC , CTR , GCM , CCM ,\r\nsupports 21 cipher algorithms: AES-128-ECB , AES-192-ECB , AES-256-ECB ,\r\n         AES-128-CBC , AES-192-CBC , AES-256-CBC , AES-128-CTR , AES-192-CTR ,\r\n         AES-256-CTR , AES-128-GCM , AES-192-GCM , AES-256-GCM , DES-ECB ,\r\n         DES-CBC , DES-EDE-ECB , DES-EDE-CBC , DES-EDE3-ECB , DES-EDE3-CBC ,\r\n         AES-128-CCM , AES-192-CCM , AES-256-CCM ,\r\n this system supports AESNI (hardware accelerated AES)\r\n this build supports AEAD (authenticated encryption with additional data)\r\nsupports 4 pk (public key) algorithms: RSA , EC , EC_DH , ECDSA ,\r\n this build supports PK export (*.pem, *.der) facility\r\n this build supports RSA key generation\r\n this build supports EC (elliptic curve) key generation\r\nsupports 12 elliptic curves: SECP192R1 , SECP224R1 , SECP256R1 , SECP384R1 ,\r\n         SECP521R1 , SECP192K1 , SECP224K1 , SECP256K1 , BP256R1 , BP384R1 ,\r\n         BP512R1 , CURVE25519 ,\r\n\r\n===============================================================================\r\nAll tests passed (952 assertions in 17 test cases)\r\n\r\n```\r\n---\r\n\r\n## notes\r\n\r\n### cryptography\r\n[cryptography](https://en.wikipedia.org/wiki/Outline_of_cryptography) is both\r\ncomplex and complicated, it requires a vast knowledge of mathematics, concepts,\r\nprinciples, algorithms, standards, conventions, continuous investigation of\r\nattacks, ...\r\n\r\n> As cryptography is mostly used to protect sensitive data, writing a library\r\n> for it is a daunting task and difficult by any factor.\r\n\r\nSo instead of writing a library from scratch, `mbedcrypto` stands on the\r\nshoulders of giants, `mbedtls` is this case.\r\n\r\n### mbedtls\r\nAlthough [mbedtls](https://github.com/ARMmbed/mbedtls) is mostly a `TLS/SSL`\r\nlibrary for embedded devices, it has already implemented the most famous and\r\nwidely used cryptographic algorithms and actively developed and maintained.\r\n\r\nArguably `mbedtls` has cleaner code than `openssl`, it's easier to read, use\r\nand maintain, and it has been designed for efficiency and portability from\r\nscratch (for embedded devices), and has many advantages over `openssl` like as\r\nreadability, size, compiling and setup, … to name a few.\r\n\r\n\r\n## disclaimer\r\n\r\n- implementing an easy-to-use, lightweight and portable `c++` library for\r\ncryptography are the main purpose of `mbedcrypto`.\r\n- there are many more algorithms in cryptographic libraries, the focus of\r\n`mbedcrypto` is on the most important or widely used algorithms, tries to be\r\nsimple and not to bloat your application.\r\n- as mentioned in [notes](#notes), the cryptography can be divided into several\r\nareas of study and best practices, I'm not a guru nor a specialist in this\r\nfield.\r\n\r\n\r\n> If you have any ideas, critiques, suggestions or whatever you want to call\r\n> it, please open an issue. I'll be happy to hear from you what you'd see in\r\n> this lib. I think about all suggestions, and I try to add those that make\r\n> sense.\r\n\r\n\r\n## license\r\nDistributed under the MIT license. Copyright (c) 2016, Amir Zamani.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}